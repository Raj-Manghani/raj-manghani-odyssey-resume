// src/App.jsx
import React, { useEffect, Suspense, useRef, useState, useMemo } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { useTexture, OrbitControls, Html } from '@react-three/drei';
import * as THREE from 'three';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

// Import components
import TwinklingStars from './components/TwinklingStars/TwinklingStars';
import PlanetSystem from './components/PlanetSystem/PlanetSystem';
import FlyingObjects from './components/FlyingObjects/FlyingObjects';
import AsteroidField from './components/AsteroidField/AsteroidField';

// Section Imports
import LandingSection from './sections/LandingSection/LandingSection';
import SkillsSection from './sections/SkillsSection/SkillsSection';
import ExperienceSection from './sections/ExperienceSection/ExperienceSection';
import ProjectsCertsSection from './sections/ProjectsCertsSection/ProjectsCertsSection';
import TechExpertiseSection from './sections/TechExpertiseSection/TechExpertiseSection';
import ContactSection from './sections/ContactSection/ContactSection';

import './infoBox.css';

gsap.registerPlugin(ScrollTrigger);

// --- planetData Definition (Assume correct from your file) ---
const PLANET_DATA = { /* ... Your full planet data object ... */ };
const degToRad = (degrees) => degrees * (Math.PI / 180);
const genericMoonTexture = '/textures/moon_map.jpg';
// --- End planetData ---

// Skybox Component (Assume correct)
function Skybox() { const texture = useTexture('/textures/star_milky_way.jpg'); return ( <mesh scale={[-1, 1, 1]}> <sphereGeometry args={[500, 64, 32]} /> <meshBasicMaterial map={texture} side={THREE.BackSide} /> </mesh> ); }

// SolarSystemGroup Component (Assume correct from your file)
function SolarSystemGroup({ activeInfo, handlePlanetClick }) {
  const orbitRefs = useMemo(() => { /* ... ref creation ... */ }, []);
  useFrame((state, delta) => { /* ... orbit rotation ... */ });
  return ( <group> {/* ... Sun and Planet rendering ... */} </group> );
}
// --- End SolarSystemGroup Component ---


// --- Main App Component ---
function App() {
  const [showResume, setShowResume] = useState(true); // Default to true
  const [activeInfo, setActiveInfo] = useState(null);
  const mainRef = useRef(); // Ref for the main element

  // --- SIMPLIFIED useEffect for GSAP & Visibility ---
  useEffect(() => {
    const mainElement = mainRef.current;
    const sections = mainElement ? gsap.utils.toArray(mainElement.children) : [];
    let triggers = []; // Store created triggers for cleanup

    if (showResume && sections.length > 0) {
        // Ensure main is visible when showResume is true
        gsap.set(mainElement, { autoAlpha: 1 }); // Use autoAlpha for visibility+opacity
        // console.log("Setting main to visible");

        // Set initial animation state and create triggers
        sections.forEach((section) => {
            gsap.set(section, { autoAlpha: 0, y: 30 }); // Start hidden
            const trigger = ScrollTrigger.create({
                trigger: section,
                start: 'top 85%',
                end: 'bottom 15%',
                // markers: true, // Uncomment for debugging triggers
                onEnter: () => gsap.to(section, { autoAlpha: 1, y: 0, duration: 0.8, ease: 'power3.out', overwrite: 'auto' }),
                onLeaveBack: () => gsap.to(section, { autoAlpha: 0, y: 30, duration: 0.5, ease: 'power3.in', overwrite: 'auto' }),
                invalidateOnRefresh: true
            });
            triggers.push(trigger); // Add trigger to array for cleanup
        });

    } else if (!showResume && mainElement) {
        // Ensure main is hidden immediately when showResume is false
        gsap.set(mainElement, { autoAlpha: 0 });
        // console.log("Setting main to hidden");
    }

    // Cleanup function: runs when component unmounts OR showResume changes
    return () => {
        // console.log("Cleaning up ScrollTriggers");
        triggers.forEach(trigger => trigger.kill());
        // Optionally kill all existing tweens targeting sections
        // gsap.killTweensOf(sections);
    };
  }, [showResume]); // Re-run ONLY when showResume changes

  // --- Menu click handler ---
  const handleMenuClick = (e) => {
    e.preventDefault(); // Prevent default jump first
    const targetId = e.target.getAttribute('href');
    const targetElement = document.querySelector(targetId);

    if (!targetElement) return; // Exit if target not found

    // If resume isn't showing, show it first, then scroll after a delay
    if (!showResume) {
        setShowResume(true);
        // Wait for state update and potential GSAP animation setup
        setTimeout(() => {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }, 200); // Increased delay slightly
    } else {
        // If already showing, just scroll
        targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  // --- Planet click handler ---
  const handlePlanetClick = (planetName) => {
      setActiveInfo(current => (current === planetName ? null : planetName));
  };

  // --- Console log for state ---
  // console.log("Rendering App - showResume:", showResume);

  return (
    <div className="app-container">
        {/* --- Header --- */}
        {/* Added check: Header visibility might depend on showResume OR be always visible */}
        {/* Let's assume header is always visible */}
        <header className="app-header">
            <nav>
                <a href="#about" onClick={handleMenuClick}>About</a>
                <a href="#skills" onClick={handleMenuClick}>Skills</a>
                <a href="#experience" onClick={handleMenuClick}>Experience</a>
                <a href="#projects" onClick={handleMenuClick}>Projects</a>
                <a href="#expertise" onClick={handleMenuClick}>Expertise</a>
                <a href="#contact" onClick={handleMenuClick}>Contact</a>
            </nav>
        </header>

        {/* --- Toggle Button --- */}
        <button
            className="toggle-view-button"
            onClick={() => setShowResume(!showResume)}
        >
            {showResume ? 'Explore Solar System' : 'Show Resume'}
        </button>

        {/* --- Controls Info --- */}
        {!showResume && (
            <div className="controls-info">
                <p><span>L-Drag:</span> Orbit | <span>R-Drag:</span> Pan | <span>Scroll:</span> Zoom</p>
            </div>
        )}

        {/* --- R3F Canvas --- */}
        <div style={{ position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', zIndex: 0 }}>
            <Canvas shadows camera={{ position: [0, 40, 120], fov: 50 }}>
                <OrbitControls enableDamping dampingFactor={0.1} />
                <Suspense fallback={null}><Skybox /></Suspense>
                <ambientLight intensity={0.15} />
                <pointLight position={[0, 0, 0]} intensity={500} distance={1000} decay={2} color="#FFF0D0" castShadow shadow-mapSize-height={1024} shadow-mapSize-width={1024} shadow-bias={-0.005}/>
                <Suspense fallback={null}>
                    <TwinklingStars count={200} />
                    <AsteroidField count={60} />
                    <FlyingObjects count={3} />
                    {/* Pass state and handler down */}
                    <SolarSystemGroup
                        activeInfo={activeInfo}
                        handlePlanetClick={handlePlanetClick}
                    />
                </Suspense>
            </Canvas>
        </div>

        {/* --- Conditionally Rendered Resume Content --- */}
        {/* Use the ref here. Render the 'main' element always, but control its visibility via GSAP */}
        <main ref={mainRef} style={{ visibility: 'hidden' }}> {/* Start hidden via inline style, GSAP takes over */}
            <LandingSection id="about" />
            <SkillsSection id="skills" />
            <ExperienceSection id="experience" />
            <ProjectsCertsSection id="projects" />
            <TechExpertiseSection id="expertise" />
            <ContactSection id="contact" />
        </main>
        {/* --- End Resume Content --- */}
    </div>
  );
}
export default App;

// NOTE: Ensure full PLANET_DATA object and other components are correctly placed.